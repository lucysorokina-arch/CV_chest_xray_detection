import os
import cv2
import numpy as np
import yaml
from collections import Counter
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split

def check_dataset_balance(labels_path):
    """–ê–Ω–∞–ª–∏–∑ –±–∞–ª–∞–Ω—Å–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞"""
    with open(labels_path, 'r') as f:
        labels = [line.strip().split()[0] for line in f if line.strip()]
    
    class_counts = Counter(labels)
    total = len(labels)
    
    print("üìä –ê–ù–ê–õ–ò–ó –ë–ê–õ–ê–ù–°–ê –î–ê–¢–ê–°–ï–¢–ê:")
    print("-" * 40)
    
    for class_id, count in class_counts.items():
        percentage = (count / total) * 100
        print(f"–ö–ª–∞—Å—Å {class_id}: {count} –ø—Ä–∏–º–µ—Ä–æ–≤ ({percentage:.1f}%)")
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
    plt.figure(figsize=(10, 6))
    plt.bar(class_counts.keys(), class_counts.values())
    plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤ –≤ –¥–∞—Ç–∞—Å–µ—Ç–µ')
    plt.xlabel('–ö–ª–∞—Å—Å—ã')
    plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–º–µ—Ä–æ–≤')
    plt.show()
    
    return class_counts

def analyze_imbalance_ratio(class_counts):
    """–ê–Ω–∞–ª–∏–∑ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞"""
    counts = list(class_counts.values())
    imbalance_ratio = max(counts) / min(counts)
    
    print(f"üìà –ö–û–≠–§–§–ò–¶–ò–ï–ù–¢ –î–ò–°–ë–ê–õ–ê–ù–°–ê: {imbalance_ratio:.1f}x")
    
    if imbalance_ratio < 3:
        print("‚úÖ –õ–µ–≥–∫–∏–π –¥–∏—Å–±–∞–ª–∞–Ω—Å - –∏—Å–ø–æ–ª—å–∑—É–µ–º weighted loss")
        return "minor"
    elif imbalance_ratio < 10:
        print("‚ö†Ô∏è –£–º–µ—Ä–µ–Ω–Ω—ã–π –¥–∏—Å–±–∞–ª–∞–Ω—Å - –∏—Å–ø–æ–ª—å–∑—É–µ–º focal loss") 
        return "moderate"
    else:
        print("üö® –°–∏–ª—å–Ω—ã–π –¥–∏—Å–±–∞–ª–∞–Ω—Å - —Ç—Ä–µ–±—É–µ—Ç—Å—è oversampling")
        return "severe"

def create_data_yaml(config_path, imbalance_strategy):
    """–°–æ–∑–¥–∞–µ—Ç data.yaml —Å —É—á–µ—Ç–æ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞"""
    with open(config_path, 'r') as f:
        config = yaml.safe_load(f)
    
    data_yaml = {
        'path': config['path'],
        'train': config['train'],
        'val': config['val'],
        'test': config['test'],
        'nc': config['nc'],
        'names': config['names'],
        'imbalance_strategy': imbalance_strategy
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º data.yaml
    with open(os.path.join(config['path'], 'data.yaml'), 'w') as f:
        yaml.dump(data_yaml, f, default_flow_style=False)
    
    print("‚úÖ data.yaml —Å–æ–∑–¥–∞–Ω —Å —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π:", imbalance_strategy)
    return data_yaml

def setup_dataset_structure(base_path):
    """–°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫ –¥–ª—è –¥–∞—Ç–∞—Å–µ—Ç–∞"""
    folders = ['images/train', 'images/val', 'images/test', 
               'labels/train', 'labels/val', 'labels/test']
    
    for folder in folders:
        os.makedirs(os.path.join(base_path, folder), exist_ok=True)
    
    print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–æ–∫ —Å–æ–∑–¥–∞–Ω–∞")
