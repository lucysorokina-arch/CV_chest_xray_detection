import pandas as pd
import os
import shutil
from sklearn.model_selection import train_test_split
import yaml

class DataBalancer:
    """–ö–ª–∞—Å—Å –¥–ª—è –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–º –¥–∞—Ç–∞—Å–µ—Ç–æ–º"""
    
    def __init__(self, data_dir="./data"):
        self.data_dir = data_dir
        self.target_balance = {
            'normal': 250,
            'clavicle_fracture': 125, 
            'foreign_body_bronchus': 85
        }
    
    def analyze_current_balance(self):
        """–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞"""
        class_counts = {0: 0, 1: 0, 2: 0}  # YOLO –∫–ª–∞—Å—Å—ã
        
        for split in ['train', 'val', 'test']:
            labels_path = os.path.join(self.data_dir, 'labels', split)
            if os.path.exists(labels_path):
                for label_file in os.listdir(labels_path):
                    if label_file.endswith('.txt'):
                        with open(os.path.join(labels_path, label_file), 'r') as f:
                            for line in f:
                                if line.strip():
                                    class_id = int(line.split()[0])
                                    class_counts[class_id] += 1
        
        print("üìä –¢–ï–ö–£–©–ò–ô –ë–ê–õ–ê–ù–° –î–ê–¢–ê–°–ï–¢–ê:")
        class_names = {0: 'clavicle_fracture', 1: 'foreign_body_bronchus', 2: 'normal'}
        for class_id, count in class_counts.items():
            print(f"   {class_names[class_id]}: {count} —Å–Ω–∏–º–∫–æ–≤")
        
        return class_counts
    
    def recommend_actions(self, current_counts):
        """–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–µ"""
        print("
üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ë–ê–õ–ê–ù–°–ò–†–û–í–ö–ï:")
        
        for class_id, target in self.target_balance.items():
            class_name = class_id
            current = current_counts.get(class_name, 0)
            needed = target - current
            
            if needed > 0:
                print(f"   ‚ûï {class_name}: –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å {needed} —Å–Ω–∏–º–∫–æ–≤")
            elif needed < 0:
                print(f"   ‚ûñ {class_name}: –º–æ–∂–Ω–æ —É–º–µ–Ω—å—à–∏—Ç—å –Ω–∞ {-needed} —Å–Ω–∏–º–∫–æ–≤")
            else:
                print(f"   ‚úÖ {class_name}: –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
    
    def create_balanced_splits(self, image_files, label_files, class_id):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ train/val/test"""
        if len(image_files) == 0:
            return [], [], []
        
        # –ü–µ—Ä–≤—ã–π —Ä–∞–∑–¥–µ–ª: train
        train_files = image_files[:int(len(image_files) * 0.7)]
        remaining = image_files[len(train_files):]
        
        # –í—Ç–æ—Ä–æ–π —Ä–∞–∑–¥–µ–ª: val –∏ test
        val_files = remaining[:len(remaining)//2]
        test_files = remaining[len(remaining)//2:]
        
        return train_files, val_files, test_files
    
    def copy_files_to_structure(self, files, source_dir, target_image_dir, target_label_dir):
        """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –≤ —Ü–µ–ª–µ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É"""
        for file in files:
            # –ö–æ–ø–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            img_src = os.path.join(source_dir, 'images', file)
            img_dst = os.path.join(target_image_dir, file)
            if os.path.exists(img_src):
                shutil.copy2(img_src, img_dst)
            
            # –ö–æ–ø–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ç–∫—É
            label_file = os.path.splitext(file)[0] + '.txt'
            label_src = os.path.join(source_dir, 'labels', label_file)
            label_dst = os.path.join(target_label_dir, label_file)
            if os.path.exists(label_src):
                shutil.copy2(label_src, label_dst)

def check_dataset_quality(data_dir):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞—Ç–∞—Å–µ—Ç–∞"""
    print("üîç –ü–†–û–í–ï–†–ö–ê –ö–ê–ß–ï–°–¢–í–ê –î–ê–¢–ê–°–ï–¢–ê...")
    
    issues = []
    
    for split in ['train', 'val', 'test']:
        images_dir = os.path.join(data_dir, 'images', split)
        labels_dir = os.path.join(data_dir, 'labels', split)
        
        if not os.path.exists(images_dir) or not os.path.exists(labels_dir):
            issues.append(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–∞–ø–∫–∞ –¥–ª—è {split}")
            continue
        
        images = set([f.split('.')[0] for f in os.listdir(images_dir) 
                     if f.endswith(('.jpg', '.png', '.jpeg'))])
        labels = set([f.split('.')[0] for f in os.listdir(labels_dir) 
                     if f.endswith('.txt')])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ —Ä–∞–∑–º–µ—Ç–∫–∏
        missing_labels = images - labels
        missing_images = labels - images
        
        if missing_labels:
            issues.append(f"‚ùå –í {split} –Ω–µ—Ç —Ä–∞–∑–º–µ—Ç–∫–∏ –¥–ª—è: {len(missing_labels)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        if missing_images:
            issues.append(f"‚ùå –í {split} –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è: {len(missing_images)} —Ä–∞–∑–º–µ—Ç–æ–∫")
    
    if not issues:
        print("‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞—Ç–∞—Å–µ—Ç–∞: –û–¢–õ–ò–ß–ù–û")
    else:
        print("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å –¥–∞—Ç–∞—Å–µ—Ç–æ–º:")
        for issue in issues:
            print(f"   {issue}")
    
    return len(issues) == 0
