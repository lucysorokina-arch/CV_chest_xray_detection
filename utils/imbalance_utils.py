
import torch
import torch.nn as nn
import numpy as np
from collections import Counter
from sklearn.utils import resample

class ImbalanceHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self, labels_path):
        self.labels_path = labels_path
        self.class_counts = self._count_classes()
    
    def _count_classes(self):
        """–ü–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–∏–º–µ—Ä–æ–≤ –ø–æ –∫–ª–∞—Å—Å–∞–º"""
        with open(self.labels_path, 'r') as f:
            labels = [line.strip().split()[0] for line in f if line.strip()]
        return Counter(labels)
    
    def calculate_class_weights(self):
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤–µ—Å–æ–≤ –∫–ª–∞—Å—Å–æ–≤ –¥–ª—è weighted loss"""
        total = sum(self.class_counts.values())
        num_classes = len(self.class_counts)
        
        weights = {}
        for class_id, count in self.class_counts.items():
            weights[int(class_id)] = total / (num_classes * count)
        
        print("üéØ –í–µ—Å–∞ –∫–ª–∞—Å—Å–æ–≤:", weights)
        return weights
    
    def get_imbalance_strategy(self):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ based on imbalance ratio"""
        counts = list(self.class_counts.values())
        imbalance_ratio = max(counts) / min(counts)
        
        if imbalance_ratio < 3:
            return "weighted_loss"
        elif imbalance_ratio < 10:
            return "focal_loss" 
        else:
            return "oversampling"
    
    def apply_oversampling(self, images_dir, labels_dir):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç oversampling –∫ –º–∏–Ω–æ—Ä–∏—Ç–∞—Ä–Ω—ã–º –∫–ª–∞—Å—Å–∞–º"""
        # –î–ª—è YOLO oversampling —Ä–µ–∞–ª–∏–∑—É–µ—Ç—Å—è —á–µ—Ä–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –Ω—É–∂–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ —Ä–∞–∑–º–µ—Ç–∫–∏
        print("üîÑ –ü—Ä–∏–º–µ–Ω—è–µ–º oversampling –∫ –º–∏–Ω–æ—Ä–∏—Ç–∞—Ä–Ω—ã–º –∫–ª–∞—Å—Å–∞–º")
        return "oversampling_applied"

class FocalLoss(nn.Module):
    """Focal Loss –¥–ª—è –±–æ—Ä—å–±—ã —Å –¥–∏—Å–±–∞–ª–∞–Ω—Å–æ–º –∫–ª–∞—Å—Å–æ–≤"""
    
    def __init__(self, alpha=1, gamma=2, reduction='mean'):
        super(FocalLoss, self).__init__()
        self.alpha = alpha
        self.gamma = gamma
        self.reduction = reduction
        
    def forward(self, inputs, targets):
        BCE_loss = nn.functional.cross_entropy(inputs, targets, reduction='none')
        pt = torch.exp(-BCE_loss)
        focal_loss = self.alpha * (1 - pt) ** self.gamma * BCE_loss
        
        if self.reduction == 'mean':
            return focal_loss.mean()
        else:
            return focal_loss
