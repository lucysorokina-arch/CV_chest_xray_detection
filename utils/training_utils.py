
import psutil
import torch
import time
from ultralytics import YOLO

def check_system_resources():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤"""
    print("üñ•Ô∏è –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–ù–´–• –†–ï–°–£–†–°–û–í:")
    print("-" * 40)
    
    # RAM
    ram_gb = psutil.virtual_memory().total / (1024**3)
    print(f"üíæ –û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å: {ram_gb:.1f} GB")
    
    # GPU
    if torch.cuda.is_available():
        gpu_name = torch.cuda.get_device_name(0)
        gpu_memory = torch.cuda.get_device_properties(0).total_memory / (1024**3)
        print(f"üéÆ GPU: {gpu_name}")
        print(f"üéÆ GPU –ü–∞–º—è—Ç—å: {gpu_memory:.1f} GB")
    else:
        print("‚ùå GPU –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω - –æ–±—É—á–µ–Ω–∏–µ –±—É–¥–µ—Ç –º–µ–¥–ª–µ–Ω–Ω—ã–º!")
    
    return ram_gb, torch.cuda.is_available()

def get_optimal_config(ram_gb, has_gpu):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ based on —Ä–µ—Å—É—Ä—Å–æ–≤"""
    if ram_gb < 8 or not has_gpu:
        print("‚ö° –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–µ–≥–∫–æ–≤–µ—Å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
        return "configs/lightweight_config.yaml"
    elif ram_gb < 16:
        print("üöÄ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é") 
        return "configs/clavicle_config.yaml"
    else:
        print("üî• –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
        return "configs/clavicle_config.yaml"

def monitor_training_progress():
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è"""
    start_time = time.time()
    
    def callback(trainer):
        elapsed = time.time() - start_time
        epoch = trainer.epoch
        total_epochs = trainer.epochs
        
        if epoch % 5 == 0:
            print(f"‚è±Ô∏è –≠–ø–æ—Ö–∞ {epoch}/{total_epochs} | –ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏: {elapsed/60:.1f} –º–∏–Ω")
    
    return callback
