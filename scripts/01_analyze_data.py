#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ –¥–∞—Ç–∞—Å–µ—Ç–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –∫–ª–∞—Å—Å–æ–≤
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(__file__)))

from utils.data_utils import check_dataset_balance, analyze_imbalance_ratio, setup_dataset_structure
from utils.data_balancer import DataBalancer, check_dataset_quality
from utils.imbalance_utils import ImbalanceHandler

def main():
    print("üîç –†–ê–°–®–ò–†–ï–ù–ù–´–ô –ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–•")
    print("=" * 50)
    
    # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–ª–∞–Ω—Å–µ—Ä–∞
    balancer = DataBalancer('./data')
    
    # 2. –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞
    current_counts = balancer.analyze_current_balance()
    
    # 3. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–µ
    balancer.recommend_actions(current_counts)
    
    # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞
    is_quality_ok = check_dataset_quality('./data')
    
    # 5. –¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –±–∞–ª–∞–Ω—Å–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)
    labels_path = './data/labels/train'
    if os.path.exists(labels_path):
        label_files = [f for f in os.listdir(labels_path) if f.endswith('.txt')]
        if label_files:
            sample_label_file = os.path.join(labels_path, label_files[0])
            
            handler = ImbalanceHandler(sample_label_file)
            strategy = handler.get_imbalance_strategy()
            weights = handler.calculate_class_weights()
            
            print(f"
üéØ –°–¢–†–ê–¢–ï–ì–ò–Ø –î–õ–Ø –î–ò–°–ë–ê–õ–ê–ù–°–ê: {strategy}")
            print(f"‚öñÔ∏è –í–ï–°–ê –ö–õ–ê–°–°–û–í: {weights}")
    
    # 6. –°–æ–∑–¥–∞–Ω–∏–µ data.yaml —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    from utils.data_utils import create_data_yaml
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é based on –±–∞–ª–∞–Ω—Å–∞
    total_images = sum(current_counts.values()) if current_counts else 0
    if total_images < 100:
        strategy = "minimal_data"
    elif any(count < 50 for count in current_counts.values()):
        strategy = "severe_imbalance" 
    else:
        strategy = "moderate_imbalance"
    
    create_data_yaml('configs/clavicle_config.yaml', strategy)
    
    print(f"
üìã –ò–¢–û–ì–û–í–ê–Ø –°–¢–†–ê–¢–ï–ì–ò–Ø: {strategy}")
    
    if not is_quality_ok:
        print("
üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print("   1. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ —Ä–∞–∑–º–µ—Ç–∫–∏")
        print("   2. –î–æ–±–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–≥–ª–∞—Å–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞–º")
        print("   3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ —Å–Ω–æ–≤–∞")
    
    print("
‚úÖ –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω!")

if __name__ == "__main__":
    main()
