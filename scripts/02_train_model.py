
#!/usr/bin/env python3
"""
–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ —Å —É—á–µ—Ç–æ–º –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π —Ä–µ—Å—É—Ä—Å–æ–≤
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(__file__)))

import argparse
from ultralytics import YOLO
from utils.training_utils import check_system_resources, get_optimal_config, monitor_training_progress
from utils.imbalance_utils import ImbalanceHandler

def train_model(config_path=None, use_lightweight=False):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—É—á–µ–Ω–∏—è"""
    
    print("üöÄ –ó–ê–ü–£–°–ö –û–ë–£–ß–ï–ù–ò–Ø –ú–û–î–ï–õ–ò")
    print("=" * 50)
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
    ram_gb, has_gpu = check_system_resources()
    
    # 2. –í—ã–±–æ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if config_path is None:
        if use_lightweight:
            config_path = "configs/lightweight_config.yaml"
        else:
            config_path = get_optimal_config(ram_gb, has_gpu)
    
    print(f"üìÅ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–Ω—Ñ–∏–≥: {config_path}")
    
    # 3. –ê–Ω–∞–ª–∏–∑ –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞
    try:
        handler = ImbalanceHandler('./data/labels/train/sample.txt')
        strategy = handler.get_imbalance_strategy()
        print(f"üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞: {strategy}")
    except:
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∏—Å–±–∞–ª–∞–Ω—Å, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ")
    
    # 4. –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
    print("üß† –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å YOLO...")
    model = YOLO('yolov8s.pt')
    
    # 5. –û–±—É—á–µ–Ω–∏–µ
    print("üéØ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ...")
    results = model.train(
        data='./data/data.yaml',
        epochs=50,
        imgsz=640,
        batch=16,
        workers=4,
        device=0,
        patience=10,
        save=True,
        exist_ok=True,
        verbose=True,
        # YOLO –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç focal loss –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏!
    )
    
    print("‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print(f"üìä –õ—É—á—à–∞—è –º–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: {model.ckpt_path}")
    
    return results, model

def main():
    parser = argparse.ArgumentParser(description='Train chest X-ray detection model')
    parser.add_argument('--config', type=str, help='Path to config file')
    parser.add_argument('--lightweight', action='store_true', help='Use lightweight config')
    
    args = parser.parse_args()
    
    try:
        results, model = train_model(args.config, args.lightweight)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ
        print("
üìã –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –¢–†–ï–ù–ò–†–û–í–ö–ï:")
        print(f"–ò—Ç–æ–≥–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏: mAP50 = {results.box.map50:.3f}")
        print(f"–ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: runs/detect/train/weights/best.pt")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏: {e}")
        print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å --lightweight –¥–ª—è —Å–ª–∞–±–æ–≥–æ –∂–µ–ª–µ–∑–∞")

if __name__ == "__main__":
    main()
